[
    {
        "id": "3674b7d8.02a168",
        "type": "subflow",
        "name": "Update available_datapoints",
        "info": "# General\nThis subflow can be used to manage which datapoints are available and send respective messages to the admin panel. It is not necessary to define all available datapoints at a time, instead it is ok to send in information on one/many available datatpoints in seperate messages. The later is useful to automatically generate the list of available datapoints while listening to incoming sensor messages. \n\nThe subflow will maintain a backup of the latest list of available messages in `available_messages.json`. This prevents sending false alarms to the admin panel that datapoints are no longer available after restarting the flow. If you have removed datapoints you should delete the file to forward the information.\n\n# Receives\n... a message formated like: \n```\nmsg = {\n    \"payload\": {\n    \t\"sensor\": {\n    \t\t<internal id of sensor 1>: <example value of sensor 1>,\n            <internal id of sensor 2>: <example value of sensor 2>,\n            ...\n    \t},\n    \t\"actuator\": {\n    \t\t<internal id of actuator 1>: <example value of actuator 1>,\n    \t\t<internal id of actuator 2>: <example value of actuator 2>,\n    \t\t...\n    \t}\n    }\n}\n```\nE.g. \n```\nmsg = {\n    \"payload\": {\n    \t\"sensor\": {\n    \t\t\"Channel__P__value__0\": 0.122,\n            \"Channel__P__unit__0\": \"kW\",\n    \t},\n    \t\"actuator\": {\n    \t\t\"Channel__P__setpoint__0\": 0.4,\n    \t}\n    }\n}\n```",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "e82a08cd.b2e278"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#3FADB5",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "6117cea4.1e57d",
        "type": "comment",
        "z": "3674b7d8.02a168",
        "name": "Update the available_datapoints object and publish if new datapoints have been found.",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "eff00765.5db5e8",
        "type": "switch",
        "z": "3674b7d8.02a168",
        "name": "If new datapoints have been found",
        "property": "new_datapoints",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "10c0462f.23d45a"
            ]
        ]
    },
    {
        "id": "e82a08cd.b2e278",
        "type": "function",
        "z": "3674b7d8.02a168",
        "name": "Check if new datapoints have been found and update global.available_datapoints if so.",
        "func": "/*\nThe structure of the incomming msg and the available datapoints object \nshould be generally like:\n\"payload\": {\n\t\"sensor\": {\n\t\t\"Channel__P__value__0\": 0.122,\n        \"Channel__P__unit__0\": \"kW\",\n\t},\n\t\"actuator\": {\n\t\t\"Channel__P__setpoint__0\": 0.4,\n\t}\n}\n*/\n\n// Check for each sensor/actuator datapoint if it is already known to \n// available_datapoints. Trigger sending an update if not so. Update the values \n// of the datapoints every time so next time we send available_datapoints it will\n// carry examples of the most recent values.\nlet new_datapoints = false\nlet available_datapoints = global.get(\"available_datapoints\") || {}\nlet available_datapoints_update = msg.payload\n\nfor (let datapoint_type of [\"sensor\", \"actuator\"]) {\n\n    // Default to empty dict in case no datapoints of this type are known yet.\n    let ad_per_type = available_datapoints[datapoint_type] || {}\n    let ad_update_per_type = available_datapoints_update[datapoint_type] || {}\n\n    for (let datapoint_id_update in ad_update_per_type) {\n        \n        if ( ! (datapoint_id_update in ad_per_type) ) {\n            new_datapoints = true\n        }\n        \n        // Store the latest datapoint value.\n        ad_per_type[datapoint_id_update] = ad_update_per_type[datapoint_id_update]\n        \n    }\n    \n    // Store the type related sub_object back to the main object.\n    available_datapoints[datapoint_type] = ad_per_type\n}\n\n// Store and return the updated available_datapoints.\nglobal.set(\"available_datapoints\", available_datapoints)\n\nmsg = {\n    \"payload\": available_datapoints, \n    \"new_datapoints\": new_datapoints\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "eff00765.5db5e8"
            ]
        ]
    },
    {
        "id": "10c0462f.23d45a",
        "type": "mqtt out",
        "z": "3674b7d8.02a168",
        "name": "",
        "topic": "$(MQTT_TOPIC_AVAILABLE_DATAPOINTS)",
        "qos": "2",
        "retain": "true",
        "broker": "f0d21eb0.93967",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "f0d21eb0.93967",
        "type": "mqtt-broker",
        "name": "environment variable broker",
        "broker": "$(MQTT_BROKER_HOST)",
        "port": "$(MQTT_BROKER_PORT)",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "68dfd515.661f7c",
        "type": "tab",
        "label": "Specify available_datapoints",
        "disabled": false,
        "info": "This flow should be used to specify available_datapoints. This can be useful to\n* Define available actuators, as these will not be detected automatically by default.\n* Some logic in the flow \"Receive raw_message\" needs to explicitly requiest the data, e.g. by polling some API.\n* If you can simply detect all available datapoints, e.g. by calling some API of the gateway.\n\nDepending on the situation one can simply manually add the data on available datapoints to the \"Manually define additional datapoint\" node, or implement some more advanced logic here that does the sensing automatically.\n\n"
    },
    {
        "id": "5e4aacbf.6c95d4",
        "type": "subflow:3674b7d8.02a168",
        "z": "68dfd515.661f7c",
        "name": "",
        "env": [],
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "b01f4077.79689",
        "type": "inject",
        "z": "68dfd515.661f7c",
        "name": "Manuelly define additional datapoints",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sensor\":{},\"actuator\":{\"Stromf_Ew.Anforderung_GLT.bAnzahlModul\":1}}",
        "payloadType": "json",
        "x": 190,
        "y": 40,
        "wires": [
            [
                "5e4aacbf.6c95d4"
            ]
        ],
        "info": "This node allows you to manually define which datapoints are available (additonally to the automatically found sensor datapoints).\n# Should return\n... a message formated to match the expected input of Update available_datapoints. E.g.\n```\nmsg = {\n    \"payload\": {\n    \t\"sensor\": {\n    \t\t\"Channel__P__value__0\": 0.122,\n            \"Channel__P__unit__0\": \"kW\",\n    \t},\n    \t\"actuator\": {\n    \t\t\"Channel__P__setpoint__0\": 0.4,\n    \t}\n    }\n}\n```"
    }
]