"""
Transcoder (a term borrowed from the xknx lib) to decode end encode
data from/to knx to/from python representation.
"""
from xknx.dpt import DPTArray
from xknx.dpt import DPTBase
from xknx.dpt import DPTBinary
from xknx.dpt import DPTDate
from xknx.dpt import DPTTime
from xknx.telegram.apci import GroupValueWrite


class DPTBool:
    """
    Transcoder for KNX bool data as xknx doesn't seem to provide a dedicated
    class for boolean values.
    """

    @staticmethod
    def to_knx(value):
        return int(value)

    @staticmethod
    def from_knx(payload):
        return bool(payload)


class KnxTranscoder:
    """
    Executes en/decoding based based on KNX group address.
    """

    def __init__(self, knx_datapoints):
        """
        Arguments:
        ----------
        knx_datapoints : dict
            Parsed version KNX_DATAPOINTS as defined in connector Readme.
        """
        self.knx_datapoints = knx_datapoints

        # Mappings between KNX datapoint types and `xknx` transcoder
        # classes as defined by xknx.
        self.transcoder_by_dpt_number = {}
        for transcoder in DPTBase.dpt_class_tree():
            if transcoder.has_distinct_dpt_numbers():
                # Build the DPT number as generated by ETS.
                if transcoder.dpt_sub_number is None:
                    # E.g. `DPT-5`
                    dpt_number = "DPT-{}".format(transcoder.dpt_main_number)
                else:
                    dpt_number = "DPST-{}-{}".format(
                        transcoder.dpt_main_number, transcoder.dpt_sub_number
                    )
                self.transcoder_by_dpt_number[dpt_number] = transcoder

        # However, the method above doesn't seem to catch all possible
        # DPT/DPST numbers. Hence here some extensions as encountered so far.
        self.transcoder_by_dpt_number.update(
            {
                "DPT-1": DPTBool,
                "DPST-1-1": DPTBool,
                "DPST-1-2": DPTBool,
                "DPST-1-3": DPTBool,
                "DPST-1-7": DPTBool,
                "DPST-1-8": DPTBool,
                # TODO: Add classes for these!
                "DPST-2-1": None,
                "DPST-10-1": DPTTime,
                "DPST-11-1": DPTDate,
                "DPST-12-1": None,
            }
        )

    def decode_sensor_value(self, value_as_knx, knx_group_address):
        """
        Parse KNX bytes to Python.

        Arguments:
        ----------
        value_as_knx : ?
            Whatever is returned by `telegram.payload.value.value`
            of a `xknx.telegram.Telegam` instance.
        knx_group_address : str
            The group address of the datapoint, e.g. `"2/3/13"`.

        Returns:
        --------
        value_as_python : ?
            The same data as Python native.
        """
        dpt_number = self.knx_datapoints["sensor"][knx_group_address]
        transcoder = self.transcoder_by_dpt_number[dpt_number]
        value_as_python = transcoder.from_knx(value_as_knx)
        return value_as_python

    def encode_actuator_value(self, value_as_python, knx_group_address):
        """
        Parses Python representation to something we can pack into a
        `xknx.telegram.Telegram`

        Arguments:
        ----------
        value_as_python : ?
            The payload data as Python representation.
        knx_group_address : str
            The group address of the datapoint, e.g. `"2/3/13"`.

        Returns:
        --------
        value_as_group_message : ?
            The `xknx.telegram.apci.GroupValueWrite` object expected by
            `xknx.telegram.Telegram.payload`.
        """
        dpt_number = self.knx_datapoints["actuator"][knx_group_address]
        transcoder = self.transcoder_by_dpt_number[dpt_number]
        value_as_knx = transcoder.to_knx(value_as_python)
        if dpt_number == "DPT-1" or "DPST-1-" in dpt_number:
            # Special treatment for bool values.
            group_value = DPTBinary(value_as_knx)
        else:
            # Everything else should be this type, see xknx source here:
            # https://github.com/XKNX/xknx/blob/a402c4609a8f3d5d96d83af271db52cb9006d6ec/xknx/telegram/apci.py#L248
            group_value = DPTArray(value_as_knx)

        value_as_group_message = GroupValueWrite(group_value)
        return value_as_group_message
