#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
"""
import os
import json
import struct

from pymodbus.client.sync import ModbusTcpClient

from pyconnector_template.pyconector_template import SensorFlow as SFTemplate
from pyconnector_template.pyconector_template import ActuatorFlow as AFTemplate
from pyconnector_template.pyconector_template import Connector as CTemplate
from pyconnector_template.dispatch import DispatchInInterval


class SensorFlow(SFTemplate):
    """
    Bundles all functionality to handle sensor messages.

    This is a template for a SensorFlow class, i.e. one that holds all
    functions that are necessary to handle messages from the device(s)
    towards the message broker. The methods could also be implemented
    into the Connector class, but are seperated to support clarity.

    Overload these functions
    ------------------------
    In order to transform this class into operational code you need
    to inherit from it and overload the following methods:
     - receive_raw_msg
     - parse_raw_msg

    Connector Methods
    -----------------
    The connector must provide the following methods to allow correct
    operation of the methods in this class:
     - _update_available_datapoints

    Connector Attributes
    --------------------
    The following attributes must be set up by the connector to
    allow these methods to run correctly:

    mqtt_client : class instance.
        Initialized Mqtt client library with signature of paho mqtt.
    SEND_RAW_MESSAGE_TO_DB : string
        if SEND_RAW_MESSAGE_TO_DB == "TRUE" will send raw message
        to designated DB via MQTT.
    MQTT_TOPIC_RAW_MESSAGE_TO_DB : string
        The topic which on which the raw messages will be published.
    datapoint_map : dict of dict.
        Mapping from datapoint key to topic. Is generated by the AdminUI.
        Looks e.e. like this:
            datapoint_map = {
                "sensor": {
                    "Channel__P__value__0": "example-connector/msgs/0001",
                    "Channel__P__unit__0": "example-connector/msgs/0002",
                },
                "actuator": {
                    "example-connector/msgs/0003": "Channel__P__setpoint__0",
                }
            }
        Note thereby that the keys "sensor" and "actuator"" must alaways be
        present, even if the child dicts are empty.
    """

    def __init__(self):
        """
        Parse Arguments
        """
        self.modbus_master_ip = os.getenv("MODBUS_MASTER_IP")
        self.modbus_master_port = int(os.getenv("MODBUS_MASTER_PORT"))
        # TODO: Parse this from env variable and add notes to Readme.
        self.modbus_config = {
            "read_registers": {
                "JanitzaCommon": {
                    "address": 19000,
                    "count": 20,
                    "unit": 1,
                    "datatypes": ">ffffffffff"
                }
            }
        }

    def receive_raw_msg(self, raw_data=None):
        """
        Functionality to receive a raw message from device.

        Poll the device/gateway for data and transforms this raw data
        into the format epxected by run_sensor_flow. If the device/gateway
        uses some protocol that pushes data, the raw data should be passed
        as the raw_data argument to the function.

        Parameters
        ----------
        raw_data : TYPE, optional
            Raw data of device/gateway if the device pushes and is not
            pulled for data. The default is None.

        Returns
        -------
        msg : dict
            The message object containing the raw unprocessed data.
            Should be formated like this:
                msg = {
                    "payload": {
                        "raw_message": <the raw data>
                    }
                }
            E.g.
                msg = {
                    "payload": {
                        "raw_message": "device_1:{sensor_1:2.12,sensor_2:3.12}"
                    }
                }
        """
        if not hasattr(self, "modbus_connection"):
            # Establish connection to modbus master device.
            self.modbus_connection = ModbusTcpClient(
                host=self.modbus_master_ip, port=self.modbus_master_port
            )
            if not self.modbus_connection.connect():
                raise RuntimeError("Could not connect to Modbus master.")

        # Read all registers requested by configuration.
        raw_message = {"read_registers": {}}
        for name in self.modbus_config["read_registers"]:
            config = self.modbus_config["read_registers"][name]
            response = self.modbus_connection.read_input_registers(
                address=config["address"],
                count=config["count"],
                unit=config["unit"],
            )
            raw_message["read_registers"][name] = response.registers

        msg = {
            "payload": {
                "raw_message": raw_message
            }
        }
        return msg


    def parse_raw_msg(self, raw_msg):
        """
        Functionality to receive a raw message from device.

        Poll the device/gateway for data and transforms this raw data
        into the format epxected by run_sensor_flow. If the device/gateway
        uses some protocol that pushes data, the raw data should be passed
        as the raw_data argument to the function.

        Be aware: All keys in the output message should be strings. All values
        should be converted be strings, too.

        Parameters
        ----------
        raw_msg : dict.
            Raw msg with data from device/gateway. Should be formated like:
                msg = {
                    "payload": {
                        "raw_message": <the raw data>,
                        "timestamp": <milliseconds since epoch>
                    }
                }

        Returns
        -------
        msg : dict
            The message object containing the parsed data as python dicts from
            dicts strucuture.
            Should be formated like this:
                msg = {
                    "payload": {
                        "parsed_message": <the parsed data as object>,
                        "timestamp": <milliseconds since epoch>
                    }
                }
            E.g:
                msg = {
                    "payload": {
                        "parsed_message": {
                            "device_1": {
                                "sensor_1": "2.12",
                                "sensor_2": "3.12"
                            }
                        },
                        "timestamp": 1573680749000
                    }
                }
        """
        raw_message = raw_msg["payload"]["raw_message"]
        parsed_message = {}
        for modbus_call in raw_message:
            parsed_message[modbus_call] = {}
            for name in raw_message[modbus_call]:

                # Load the raw data received via modbus and the definiton
                # how to parse it.
                registers = raw_message[modbus_call][name]
                datatypes = self.modbus_config[modbus_call][name]["datatypes"]

                # Now we going to to encode the registers (which are currently
                # represented as 16bit int values) to bytes so we can decode
                # the data back with the correct datatype.
                #
                # TODO add exception handling here.
                values_b = b''.join(struct.pack('!H', x) for x in registers)
                values = struct.unpack(datatypes, values_b)

                values_dict = {str(k): str(v) for k, v in enumerate(values)}
                parsed_message[modbus_call][name] = values_dict

        msg = {
            "payload": {
                "parsed_message": parsed_message
            }
        }
        return msg


class ActuatorFlow(AFTemplate):
    """
    Bundles all functionality to handle actuator messages.

    This is a template for a ActuatorFlow class, i.e. one that holds all
    functions that are necessary to handle messages from the message
    broker towards the devices/gateway. The methods could also be implemented
    into the Connector class, but are seperated to support clarity.

    Overload these functions
    ------------------------
    In order to transform this class into operational code you need
    to inherit from it and overload the following methods:
     - send_command

    Connector Attributes
    --------------------
    The following attributes must be set up by the connector to
    allow these methods to run correctly:

    datapoint_map : dict of dict.
        Mapping from datapoint key to topic. Is generated by the AdminUI.
        Looks e.e. like this:
            datapoint_map = {
                "sensor": {
                    "Channel__P__value__0": "example-connector/msgs/0001",
                    "Channel__P__unit__0": "example-connector/msgs/0002",
                },
                "actuator": {
                    "example-connector/msgs/0003": "Channel__P__setpoint__0",
                }
            }
        Note thereby that the keys "sensor" and "actuator"" must alaways be
        present, even if the child dicts are empty.
    """

    def send_command(self, datapoint_key, datapoint_value):
        """
        Send message to target device, via gateway if applicable.

        Parameters
        ----------
        datapoint_key : string.
            The internal key that is used by device/gateway to identify
            the datapoint.
        value : string.
            The value that should be sent to the datapoint.
        """
        raise NotImplementedError("send_command has not been implemented.")


class Connector(CTemplate, SensorFlow, ActuatorFlow):
    """
    The generic logic of the connector.

    It should not be necessary to overload any of these methods nor
    to call any of those apart from __init__() and run().

    Configuration Attributes
    ------------------------
    Confiugration will be populated from environment variables on init.
    CONNECTOR_NAME : string
        The name of the connector instance as seen by the AdminUI.
    MQTT_TOPIC_LOGS : string
        The topics used by the log handler to publish log messages on.
    MQTT_TOPIC_HEARTBEAT : string
        The topics used by the connector to publish heartbeats on.
    MQTT_TOPIC_AVAILABLE_DATAPOINTS : string
        The topic on which the available datapoints will be published.
    MQTT_TOPIC_DATAPOINT_MAP : string
        The topic the connector will listen on for datapoint maps
    SEND_RAW_MESSAGE_TO_DB : string
        if SEND_RAW_MESSAGE_TO_DB == "TRUE" will send raw message
        to designated DB via MQTT. This is a string and not a bool as
        environment variables are always strings.
    MQTT_TOPIC_RAW_MESSAGE_TO_DB : string
        The topic which on which the raw messages will be published.
    DEBUG : string
        if DEBUG == "TRUE" will log debug message to, elso loglevel is info.
    MODBUS_MASTER_IP : string
        The ip adress or DNS name of the Modbus master device which we want
        to connect to.
    MODBUS_MASTER_PORT : string (as env variables are always strings)
        The port on which  the master device awaits Modbus communication.

    Computed Attributes
    -------------------
    These attriubutes are created by init and are then dynamically used
    by the Connector.
    mqtt_client : class instance.
        Initialized Mqtt client library with signature of paho mqtt.
    available_datapoints : dict of dict.
        Lists all datapoints known to the connector and is sent to the
        AdminUI. Actuator datapoints must be specified manually. Sensor
        datapoints are additionally automatically added once a value for
        a new datapoint is received. The object contains the connector
        internal key and a sample and value looks e.g. like this:
            available_datapoints = {
                "sensor": {
                    "Channel__P__value__0": 0.122,
                    "Channel__P__unit__0": "kW",
                },
                "actuator": {
                    "Channel__P__setpoint__0": 0.4,
                }
            }
    datapoint_map : dict of dict.
        Mapping from datapoint key to topic. Is generated by the AdminUI.
        Looks e.e. like this:
            datapoint_map = {
                "sensor": {
                    "Channel__P__value__0": "example-connector/msgs/0001",
                    "Channel__P__unit__0": "example-connector/msgs/0002",
                },
                "actuator": {
                    "example-connector/msgs/0003": "Channel__P__setpoint__0",
                }
            }
        Note thereby that the keys "sensor" and "actuator"" must alaways be
        present, even if the child dicts are empty.
    """

    def __init__(self, *args, **kwargs):
        """
        Call init of parent classes that have an init method and pass all
        arguments to the Connector definition from pyconnector_template.
        """
        SensorFlow.__init__(self)
        CTemplate.__init__(self, *args, **kwargs)


if __name__ == "__main__":
    # Sensor datapoints will be added to available_datapoints automatically
    # once they are first appear in run_sensor_flow method. It is thus not
    # necessary to specify them here. Actuator datapoints must be
    # specified explicitly, including a demo value.
    available_datapoints = {
        "sensor": {},
        "actuator": {}
    }
    # We need to specify a dispatcher that triggers the connection with
    # the device or gateway. Here we want to poll the device every 5 seconds
    # and use the DispatchInInterval interval thus, with suitable
    # configuration. The run method of the Connector will automatically
    # wire up target function of the dispatcher (run_sensor_flow) with
    # the dispatcher.
    DeviceDispatcher = DispatchInInterval
    device_dispatcher_kwargs = {"call_interval": 5}

    # Init the connector with the configuration and arguments defined above.
    connector = Connector(
        available_datapoints=available_datapoints,
        DeviceDispatcher=DeviceDispatcher,
        device_dispatcher_kwargs=device_dispatcher_kwargs,
    )

    connector.run()
