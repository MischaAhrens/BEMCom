# Generated by Django 3.0 on 2019-12-05 09:49

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='')),
                ('mqtt_topic_logs', models.TextField(default='')),
                ('mqtt_topic_heartbeat', models.TextField(default='')),
                ('mqtt_topic_available_datapoints', models.TextField(default='')),
                ('mqtt_topic_datapoint_map', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='DatapointUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_qunatity', models.TextField(help_text='The quantity of the unit, e.g. Temperature or Power')),
                ('unit_symbol', models.TextField(help_text='The short symbol of the unit, e.g. Â°C or kW')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceLocationFriendlyName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.TextField(default='', help_text='Human readable device location. E.g. 3.1.12 or heating cellar')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.TextField(default='', help_text='Human readable device description. E.g. room thermostat or heat meter')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_virtual', models.BooleanField(help_text='True for virtual devices like e.g. a webservice.')),
                ('x', models.FloatField(default=None, help_text='X Position in 3D Model', null=True)),
                ('y', models.FloatField(default=None, help_text='Y Position in 3D Model', null=True)),
                ('z', models.FloatField(default=None, help_text='Z Position in 3D Model', null=True)),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
                ('device_location_friendly_name', models.ForeignKey(on_delete=models.SET(''), to='admin_interface.DeviceLocationFriendlyName')),
                ('device_type_friendly_name', models.ForeignKey(on_delete=models.SET(''), to='admin_interface.DeviceType')),
            ],
        ),
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mqtt_topic', models.TextField(editable=False, help_text='The MQTT topic on which the values of this datapoint are published. Is auto generated for consistency.', null=True)),
                ('min_value', models.FloatField(default=None, help_text='The minimal expected value of the datapoint. Is uesed for automatically scaling plots. Only applicable to datapoints thatcarry numeric values.', null=True)),
                ('max_value', models.FloatField(default=None, help_text='The maximal expected value of the datapoint. Is uesed for automatically scaling plots. Only applicable to datapoints thatcarry numeric values.', null=True)),
                ('default_value', models.FloatField(blank=True, default='--.-', help_text='The value that is displayed before the latest datapoint values have been received via MQTT.')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Device')),
                ('unit', models.ForeignKey(on_delete=models.SET(''), to='admin_interface.DatapointUnit')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectorLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('msg', models.TextField(default='')),
                ('emitter', models.TextField(default='')),
                ('level', models.SmallIntegerField()),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectorHearbeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_heartbeat', models.DateTimeField()),
                ('next_heartbeat', models.DateTimeField()),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectorAvailableDatapoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datapoint_type', models.CharField(max_length=8)),
                ('datapoint_key_in_connector', models.TextField(default='')),
                ('datapoint_example_value', models.TextField(default='')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
        ),
    ]
