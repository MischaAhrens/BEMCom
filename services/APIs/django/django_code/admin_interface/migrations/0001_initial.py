# Generated by Django 2.2.5 on 2020-01-14 14:47

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='test-connector', max_length=50, verbose_name='Connector name')),
                ('mqtt_topic_logs', models.CharField(blank=True, default='/logs', max_length=100, verbose_name='MQTT topic for logs')),
                ('mqtt_topic_heartbeat', models.CharField(blank=True, default='/heartbeat', max_length=100, verbose_name='MQTT topic for heartbeat')),
                ('mqtt_topic_available_datapoints', models.CharField(blank=True, default='/available_datapoints', max_length=100, verbose_name='MQTT topic for available datapoints')),
                ('mqtt_topic_datapoint_map', models.CharField(blank=True, default='/datapoint_map', max_length=100, verbose_name='MQTT topic for datapoint map')),
                ('mqtt_topic_raw_message_to_db', models.CharField(blank=True, default='/raw_message_to_db', max_length=100, verbose_name='MQTT topic for raw message to database')),
                ('mqtt_topic_raw_message_reprocess', models.CharField(blank=True, default='/raw_message_reprocess', max_length=100, verbose_name='MQTT topic for reprocess')),
                ('mqtt_topic_datapoint_message_wildcard', models.CharField(blank=True, default='messages/#', max_length=100, verbose_name='MQTT topic for all datapoint messages (wildcard)')),
                ('date_added', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='DatapointUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_quantity', models.TextField(help_text='The quantity of the unit, e.g. Temperature or Power')),
                ('unit_symbol', models.TextField(help_text='The short symbol of the unit, e.g. Â°C or kW')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceLocationFriendlyName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.TextField(default='', help_text='Human readable device location. E.g. 3.1.12 or heating cellar')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceMaker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.TextField(default='', help_text='Human readable device manufacturer or service provider. E.g. Aquametro', max_length=30)),
                ('slug', models.SlugField(default='', max_length=40)),
            ],
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friendly_name', models.TextField(default='', help_text='Human readable device description. E.g. room thermostat or heat meter', max_length=30)),
                ('slug', models.SlugField(default='', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.TextField(default='', help_text='Version/model of device, e.g. 2.1', max_length=30)),
                ('slug', models.SlugField(default='', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='GenericDatapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_as', models.CharField(choices=[('not used', 'Not used'), ('numeric', 'Numeric'), ('text', 'Text')], default='not used', max_length=8)),
                ('type', models.CharField(default=None, editable=False, max_length=8)),
                ('key_in_connector', models.TextField()),
                ('example_value', models.CharField(max_length=30)),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
        ),
        migrations.CreateModel(
            name='TextDatapoint',
            fields=[
                ('genericdatapoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='admin_interface.GenericDatapoint')),
                ('last_value', models.TextField(editable=False)),
                ('last_timestamp', models.DateTimeField(editable=False)),
            ],
            bases=('admin_interface.genericdatapoint',),
        ),
        migrations.CreateModel(
            name='NonDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(default='', help_text='Descriptive name of this device.', max_length=30)),
                ('datapoint_keys_regex', models.TextField(blank=True, default='', help_text='Regular expression to automatically match available datapoints to this device based on their key.')),
                ('url', models.URLField(blank=True)),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(default='', help_text='Descriptive name of this device.', max_length=30)),
                ('datapoint_keys_regex', models.TextField(blank=True, default='', help_text='Regular expression to automatically match available datapoints to this device based on their key.')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConnectorLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('msg', models.TextField(default='', verbose_name='Message')),
                ('emitter', models.TextField(default='')),
                ('level', models.SmallIntegerField()),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
            options={
                'verbose_name_plural': 'Connector log entries',
            },
        ),
        migrations.CreateModel(
            name='ConnectorHeartbeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_heartbeat', models.DateTimeField()),
                ('next_heartbeat', models.DateTimeField()),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
            options={
                'verbose_name_plural': 'Connector heartbeats',
            },
        ),
        migrations.CreateModel(
            name='ConnectorDatapointTopicMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datapoint_type', models.CharField(max_length=8)),
                ('datapoint_key_in_connector', models.TextField(default='')),
                ('mqtt_topic', models.TextField(default='')),
                ('subscribed', models.BooleanField(default=False, verbose_name='subscribe/ unsubscribe')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_interface.Connector')),
            ],
            options={
                'verbose_name': 'Connector datapoint to MQTT topic mapping',
                'verbose_name_plural': 'Connector datapoint to MQTT topic mapping',
            },
        ),
        migrations.CreateModel(
            name='NumericDatapoint',
            fields=[
                ('genericdatapoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='admin_interface.GenericDatapoint')),
                ('last_value', models.TextField(editable=False)),
                ('last_timestamp', models.DateTimeField(editable=False)),
                ('min_value', models.FloatField(blank=True, default=None, help_text='The minimal expected value of the datapoint. Is uesed for automatically scaling plots. Only applicable to datapoints thatcarry numeric values.', null=True)),
                ('max_value', models.FloatField(blank=True, default=None, help_text='The maximal expected value of the datapoint. Is uesed for automatically scaling plots. Only applicable to datapoints thatcarry numeric values.', null=True)),
                ('unit', models.ForeignKey(on_delete=models.SET(''), to='admin_interface.DatapointUnit')),
            ],
            bases=('admin_interface.genericdatapoint',),
        ),
    ]
