# Generated by Django 2.2.5 on 2020-03-26 21:47

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, unique=True, verbose_name='Connector name')),
                ('mqtt_topic_logs', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for logs')),
                ('mqtt_topic_heartbeat', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for heartbeat')),
                ('mqtt_topic_available_datapoints', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for available datapoints')),
                ('mqtt_topic_datapoint_map', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for datapoint map')),
                ('mqtt_topic_raw_message_to_db', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for raw message to database')),
                ('mqtt_topic_raw_message_reprocess', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for reprocess')),
                ('mqtt_topic_datapoint_message_wildcard', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for all datapoint messages (wildcard)')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('last_changed', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='Flag if the connector should publish values for this datapoint.')),
                ('key_in_connector', models.TextField(editable=False, help_text='Internal key used by the connector to identify the datapoint in the incoming/outgoing data streams.')),
                ('type', models.CharField(default=None, editable=False, help_text='Datapoint type, can be ether sensor or actuator. Is defined by the connector.', max_length=8)),
                ('data_format', models.CharField(choices=[('generic_numeric', 'Generic Numeric'), ('continuous_numeric', 'Continuous Numeric'), ('discrete_numeric', 'Discrete Numeric'), ('generic_text', 'Generic Text'), ('discrete_text', 'Discrete Text')], default='generic_text', help_text='Format of the datapoint value. Additionally defines which metadata is available for it. See documentation for details.', max_length=18)),
                ('example_value', models.CharField(editable=False, help_text='One example value for this datapoint. Should help admins while mangeing datapoints, i.e. to specify the correct data format.', max_length=30)),
                ('description', models.TextField(blank=True, help_text='A human readable description of the datapoint targeted on users of the API wihtout knowledge about connector details.')),
                ('last_value', models.TextField(editable=False, help_text='The last value received via MQTT.', null=True)),
                ('last_value_timestamp', models.DateTimeField(editable=False, help_text='The timestamp of the last value received via MQTT.', null=True)),
                ('last_setpoint', models.TextField(editable=False, help_text='The last schedule received via MQTT. Applicable to actuator datapoints.', null=True)),
                ('last_setpoint_timestamp', models.DateTimeField(editable=False, help_text='The timestamp of the last value received via MQTT.Applicable to actuator datapoints.', null=True)),
                ('last_schedule', models.TextField(editable=False, help_text='The last schedule received via MQTT. Applicable to actuator datapoints.', null=True)),
                ('last_schedule_timestamp', models.DateTimeField(editable=False, help_text='The timestamp of the last value received via MQTT.Applicable to actuator datapoints.', null=True)),
                ('allowed_values', models.TextField(editable=False, help_text='Allowed values. Applicable to discrete valued datapoints.', null=True)),
                ('min_value', models.FloatField(default=None, help_text='The minimal expected value of the datapoint. Applicable to numeric datapoints.', null=True)),
                ('max_value', models.FloatField(default=None, help_text='The maximal expected value of the datapoint. Applicable to numeric datapoints.', null=True)),
                ('unit', models.TextField(blank=True, default='', help_text='The unit in SI notation, e.g.  Mg*m*s^-2 aka. kN. Applicable to numeric datapoints.')),
                ('connector', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='main.Connector')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectorLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(editable=False)),
                ('msg', models.TextField(default='', editable=False, verbose_name='Log message')),
                ('emitter', models.TextField(default='', editable=False)),
                ('level', models.SmallIntegerField(choices=[(10, 'DEBUG'), (20, 'INFO'), (30, 'WARNING'), (40, 'ERROR'), (50, 'CRITICAL')], editable=False)),
                ('connector', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='main.Connector')),
            ],
            options={
                'verbose_name_plural': 'Connector log entries',
            },
        ),
        migrations.CreateModel(
            name='ConnectorHeartbeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_heartbeat', models.DateTimeField(editable=False)),
                ('next_heartbeat', models.DateTimeField(editable=False)),
                ('connector', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='main.Connector')),
            ],
            options={
                'verbose_name_plural': 'Connector heartbeats',
            },
        ),
    ]
