# Generated by Django 3.1.6 on 2021-02-18 17:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, unique=True, verbose_name='Connector name')),
                ('mqtt_topic_logs', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for logs')),
                ('mqtt_topic_heartbeat', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for heartbeat')),
                ('mqtt_topic_available_datapoints', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for available datapoints')),
                ('mqtt_topic_datapoint_map', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for datapoint map')),
                ('mqtt_topic_raw_message_to_db', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for raw message to database')),
                ('mqtt_topic_raw_message_reprocess', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for reprocess')),
                ('mqtt_topic_datapoint_message_wildcard', models.TextField(default=None, editable=False, unique=True, verbose_name='MQTT topic for all datapoint messages (wildcard)')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('last_changed', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default=None, unique=True, verbose_name='Controller name, used for display in the admin page.')),
                ('mqtt_topic_controlled_datapoints', models.TextField(default=None, unique=True, verbose_name='MQTT topic on which the controller awaits the configuration data.')),
            ],
        ),
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin_id', models.TextField(blank=True, help_text='This id used if the datapoint metadata is (partly) configured in an external service (e.g. BEMCom) and should be used in the curren service (e.g. the EMP). This field allows matching the ids of the external service with id maintained by the current service, which effectively allows the current service to useadditional datapoints that do not exist in the external service, which is handy for mocking UIs and stuff.', null=True, unique=True)),
                ('short_name', models.TextField(default=None, help_text='A short name to identify the datapoint.', max_length=30, null=True, unique=True)),
                ('data_format', models.CharField(choices=[('generic_numeric', 'Generic Numeric'), ('continuous_numeric', 'Continuous Numeric'), ('discrete_numeric', 'Discrete Numeric'), ('generic_text', 'Generic Text'), ('discrete_text', 'Discrete Text')], default='generic_text', help_text='Format of the datapoint value. Additionally defines which metadata is available for it. See documentation in code for details.', max_length=18)),
                ('description', models.TextField(blank=True, help_text='A human readable description of the datapoint targeted on users of the API wihtout knowledge about connector details.')),
                ('origin_description', models.TextField(blank=True, help_text='A human readable description of the datapoint targeted on users of the API wihtout knowledge about connector details.This is the description provided by the extenral tool.')),
                ('allowed_values', models.JSONField(blank=True, default=None, help_text='Allowed values. Applicable to discrete valued datapoints. Must be a valid JSON string.', null=True)),
                ('min_value', models.FloatField(blank=True, default=None, help_text='The minimal expected value of the datapoint. Applicable to numeric datapoints.', null=True)),
                ('max_value', models.FloatField(blank=True, default=None, help_text='The maximal expected value of the datapoint. Applicable to numeric datapoints.', null=True)),
                ('unit', models.TextField(blank=True, default='', help_text='The unit in SI notation, e.g.  Mg*m*s^-2 aka. kN. Applicable to numeric datapoints.')),
                ('last_value', models.TextField(blank=True, default=None, help_text='The last value received for the datapoint. We store all values including numeric as strings as this simplfies the logic significantly and prevents unintended side effects, e.g. data loss if the data format field is changed.', null=True)),
                ('last_value_timestamp', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last value received via MQTT.', null=True)),
                ('last_setpoint', models.JSONField(blank=True, default=None, help_text='The last schedule received for the datapoint. Applicable to actuator datapoints.', null=True)),
                ('last_setpoint_timestamp', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last value received for the datapoint.Applicable to actuator datapoints.', null=True)),
                ('last_schedule', models.JSONField(blank=True, default=None, help_text='The last schedule received for the datapoint.Applicable to actuator datapoints.', null=True)),
                ('last_schedule_timestamp', models.DateTimeField(blank=True, default=None, help_text='The timestamp of the last value received for the datapoint.Applicable to actuator datapoints.', null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Flag if the connector should publish values for this datapoint.')),
                ('key_in_connector', models.TextField(editable=False, help_text='Internal key used by the connector to identify the datapoint in the incoming/outgoing data streams.')),
                ('type', models.CharField(default=None, editable=False, help_text='Datapoint type, can be ether sensor or actuator. Is defined by the connector.', max_length=8)),
                ('example_value', models.CharField(editable=False, help_text='One example value for this datapoint. Should help admins while mangeing datapoints, i.e. to specify the correct data format.', max_length=30)),
                ('connector', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api_main.connector')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatapointValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, default=None, help_text='The last value of the datapoint. Will be a string or null. Values of numeric datapoints are sent as strings too, as this drastically reduces effort for implementing the REST interfaces.', null=True)),
                ('timestamp', models.DateTimeField(default=None, help_text='For sensor datapoints: The time the value was received by the connector.\nFor actuator datapoints: The time the message was created by the external entity.\nBoth in milliseconds since 1970-01-01 UTC.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the value message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='api_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatapointSetpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setpoint', models.JSONField(blank=True, default=list, help_text='A JSON array holding zero or more DatapointSetpointItems.')),
                ('timestamp', models.DateTimeField(blank=True, default=None, help_text='The time the message was created by the external entity in milliseconds since 1970-01-01 UTC.', null=True)),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the setpoint message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='api_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatapointSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.JSONField(blank=True, default=list, help_text='A JSON array holding zero or more DatapointScheduleItems.')),
                ('timestamp', models.DateTimeField(default=None, help_text='The time the message was created by the external entity in milliseconds since 1970-01-01 UTC.')),
                ('datapoint', models.ForeignKey(help_text='The datapoint that the schedule message belongs to.', on_delete=django.db.models.deletion.CASCADE, to='api_main.datapoint')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ControlledDatapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Flag if the this mapping should currently be used (i.e. be published as part of the controlled_datapoints msg to the controller).')),
                ('actuator_datapoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='controller_actuator_datapoint', to='api_main.datapoint')),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_main.controller')),
                ('sensor_datapoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='controller_sensor_datapoint', to='api_main.datapoint')),
            ],
        ),
        migrations.CreateModel(
            name='ConnectorLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(editable=False)),
                ('msg', models.TextField(default='', editable=False, verbose_name='Log message')),
                ('emitter', models.TextField(default='', editable=False)),
                ('level', models.SmallIntegerField(choices=[(10, 'DEBUG'), (20, 'INFO'), (30, 'WARNING'), (40, 'ERROR'), (50, 'CRITICAL')], editable=False)),
                ('connector', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api_main.connector')),
            ],
            options={
                'verbose_name_plural': 'Connector log entries',
            },
        ),
        migrations.CreateModel(
            name='ConnectorHeartbeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_heartbeat', models.DateTimeField(editable=False)),
                ('next_heartbeat', models.DateTimeField(editable=False)),
                ('connector', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='api_main.connector')),
            ],
            options={
                'verbose_name_plural': 'Connector heartbeats',
            },
        ),
        migrations.AddConstraint(
            model_name='datapointvalue',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Value msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='datapointsetpoint',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Setpoint msg unique for timestamp'),
        ),
        migrations.AddConstraint(
            model_name='datapointschedule',
            constraint=models.UniqueConstraint(fields=('datapoint', 'timestamp'), name='Schedule msg unique for timestamp'),
        ),
    ]
