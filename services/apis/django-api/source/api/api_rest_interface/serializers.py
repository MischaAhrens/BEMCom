from rest_framework import serializers

from api_main.models.datapoint import Datapoint
from api_main.models.connector import Connector


class ConnectorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Connector
        fields = [
            "name"
        ]
        # Removes the unique constraint for the name from the serializer.
        # We match and check the connector name manually in the view.
        extra_kwargs = {
            'name': {
                'validators': [],
            }
        }


class DatapointSerializer(serializers.ModelSerializer):
    """
    Serializer matching the fields of the Datapoint model of the API.
    """
    __doc__ = None
    connector = ConnectorSerializer()

    class Meta:
        model = Datapoint
        fields = [
            "id",
            "connector",
            "key_in_connector",
            "type",
            "data_format",
            "short_name",
            "description",
            "min_value",
            "max_value",
            "allowed_values",
            "unit",
            ]
        # The values of these fields are internally generated by the
        # API service and the respective connector service. We don not
        # wish that any external program overloads these.
        read_only_fields = [
            "id",
        ]
        # Removes the unique constraint from the serializer as we do
        # only updating and the short name is very likely to exist already.
        extra_kwargs = {
            'short_name': {
                'validators': [],
            },
        }
